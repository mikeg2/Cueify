package com.cueify.output;

import java.io.File;
import java.net.MalformedURLException;

import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.ReadOnlyBooleanWrapper;
import javafx.beans.property.ReadOnlyProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableBooleanValue;
import javafx.beans.value.ObservableValue;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaPlayer.Status;
import javafx.util.Duration;

import com.cueify.action.Action;
import com.cueify.output.helper.DurationTimeElapsedProperty;
import com.cueify.output.helper.MediaPlayerPositionWrapper;
import com.cueify.output.setting.AudioPlayerSettings;
import com.cueify.time.TimeElapsed;
import com.cueify.timeline.TimelineState;

public class AudioOutput extends JavaFxMediaBasicOutput {
	private MediaPlayer player;
	private AudioPlayerSettings settings = new AudioPlayerSettings();
	private DurationTimeElapsedProperty mppWrapper;
	private BooleanProperty ready = new SimpleBooleanProperty(false);
	
	public AudioOutput() {
		source().addListener(new InvalidationListener() {
			
			@Override
			public void invalidated(Observable observable) {
				stop();
				updateMediaPlayer();
			}
		});
	}

	private void updateMediaPlayer() {
		final AudioOutput me = this;
		try {
			System.out.println("Source: " + getSource());
			Media m = new Media(getSource().getAbsoluteFile().toURI().toURL().toString());
			player = new MediaPlayer(m);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		player.statusProperty().addListener(new ChangeListener<MediaPlayer.Status>() {
		
			@Override
			public void changed(
					ObservableValue<? extends MediaPlayer.Status> observable,
					MediaPlayer.Status oldValue, MediaPlayer.Status newValue) {
				if (newValue != Status.UNKNOWN) {
					ready.set(true);
					observable.removeListener(this);
				};
			}
		});
		player.statusProperty().addListener(new ChangeListener<MediaPlayer.Status>() {

			@Override
			public void changed(ObservableValue<? extends Status> observable,
					Status oldValue, Status newValue) {
				if (newValue == Status.STOPPED) {
					mppWrapper.set(new TimeElapsed(0));
					if(me.getState() != TimelineState.FINISHED)
						stop();
				}
			}
		});
		mppWrapper = new DurationTimeElapsedProperty(player);
		settings.linkToMediaPlayer(player);
		mppWrapper.multiplyer().bind(settings.rate());
	}

	@Override
	public void play() {
		super.play();
		if (isReady() == true) {
			player.play();
		} else {
			ready().addListener(new ChangeListener<Boolean>() {

				@Override
				public void changed(ObservableValue<? extends Boolean> observable,
						Boolean oldValue, Boolean newValue) {
					if(newValue.booleanValue() == true) {
						System.out.println("PLAYING STARTED: ");
						play(); // calls self;
						ready().removeListener(this);
					}
				}
			});
		}
	}

	@Override
	public void play(TimeElapsed startAtTime) {
		super.play();
		player.play();
	}

	@Override
	public void movePlayheadTo(TimeElapsed atTime) {
		player.seek(atTime.toDuration());
	}

	@Override
	public void pause() {
		super.pause();
		if(player != null)
			player.pause();
	}

	@Override
	public void stop() {
		super.stop();
		if(player != null)
			player.stop();
	}

	@Override
	public void reset() {
		if(player != null)
			player.seek(player.getStartTime());
	}

	@Override
	public TimeElapsed getAbsoluteDuration() {
		return settings.duration().getValue();
	}

	@Override
	public TimeElapsed getPlayhead() {
		return mppWrapper.get();
	}

	@Override
	public ObjectProperty<TimeElapsed> playhead() {
		return mppWrapper;
	}

	public void setStartTime(TimeElapsed timeElapsed) {
		settings.startTime().set(timeElapsed);
	}
	
	public TimeElapsed getStartTime() {
		return settings.startTime().get();
	}
	
	public SimpleObjectProperty<TimeElapsed> startTime() {
		return settings.startTime();
	}

	public void setStopTime(TimeElapsed stopTime) {
		settings.stopTime().set(stopTime);
	}
	
	public TimeElapsed getStopTime() {
		return settings.stopTime().get();
	}
	
	public SimpleObjectProperty<TimeElapsed> stopTime() {
		return settings.stopTime();
	}

	public double getVolume() {
		return settings.volume().getValue();
	}

	public void setVolume(double value) {
		settings.volume().setValue(value);
	}

	public DoubleProperty volume() {
		return settings.volume();
	}

	public double getRate() {
		return settings.rate().getValue();
	}

	public void setRate(double value) {
		settings.rate().setValue(value);
	}

	public DoubleProperty rate() {
		return settings.rate();
	}
	
	@Override
	public ObservableValue<TimeElapsed> absoluteDuration() {
		return settings.duration();
	}

	@Override
	public boolean isReady() {
		return ready.getValue();
	}

	@Override
	public ObservableBooleanValue ready() {
		return new ReadOnlyBooleanWrapper(ready, "Ready");
	}
	
	protected BooleanProperty readyProperty() {
		return ready;
	}
}
